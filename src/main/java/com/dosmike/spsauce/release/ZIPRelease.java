package com.dosmike.spsauce.raw;

import com.dosmike.spsauce.Executable;
import com.dosmike.spsauce.release.FileSet;
import com.dosmike.spsauce.script.BuildScript;
import com.dosmike.spsauce.tasks.ReleaseTask;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.StandardOpenOption;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

public class ZIPRelease extends ReleaseTask {

    String archiveName;

    public ZIPRelease(FileSet files, String[] args) {
        super(files);
        assert args.length == 1;
        this.archiveName = args[0];
    }

    @Override
    public void run() {
        archiveName = BuildScript.injectRefs(archiveName);
        Path destination = Executable.workdir.resolve(archiveName).toAbsolutePath().normalize();
        System.out.println("â””-> Zipping to archive: "+archiveName);

        if (!destination.startsWith(Executable.workdir))
            throw new IllegalArgumentException("Unable to create release archive outside of working directory: "+destination);
        try {
            ZipOutputStream zos = new ZipOutputStream(Files.newOutputStream(destination, StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.CREATE));
            zos.setLevel(9);
            for (FileSet.Entry e : files.getCandidates()) {
                if (e.isValid()) {
                    Path file = Executable.workdir.resolve(e.getProjectPath()).toAbsolutePath().normalize();
                    if (!file.startsWith(Executable.workdir))
                        throw new IllegalArgumentException("Unable to archive file outside of working directory: " + destination);
                    if (file.equals(destination))
                        throw new IllegalArgumentException("Unable to archive the archive, nice try!");
                    String zipPath;
                    try {
                        zipPath = e.getInstallPath().toString();
                    } catch (Throwable t) {
                        zipPath = Executable.workdir.relativize(file).toString();
                    }
                    zos.putNextEntry(new ZipEntry(zipPath));
                    Files.copy(file, zos);
                    zos.closeEntry();
                }
            }
            zos.setComment("This archive was generated by SPSauce");
            zos.flush();
            zos.close();
        } catch (IOException e) {
            throw new RuntimeException("Unable to write release archive", e);
        }
    }
}
